// Число
// Диапазон ±((2^53)-1).
let n = 123;
n = 12.345;

// Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.
// NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции


// Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать с целыми числами произвольной длины.
// Чтобы создать значение типа BigInt, необходимо добавить n в конец числового литерала:
// символ "n" в конце означает, что это BigInt
const bigInt = 1234567890123456789012345678901234567890n;




// Строка
// Строка (string) в JavaScript должна быть заключена в кавычки.

let str = "Привет";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`; //Здесь можно встраивать переменные при помощи ${/*Переменная*/}




// Булевый (логический) тип
// Булевый тип (boolean) может принимать только два значения: true (истина) и false (ложь).

// Такой тип, как правило, используется для хранения значений да/нет: true значит «да, правильно», а false значит «нет, не правильно».

// Например:

let nameFieldChecked = true; // да, поле отмечено
let ageFieldChecked = false; // нет, поле не отмечено



// Значение «null»
// Специальное значение null не относится ни к одному из типов, описанных выше.

// Оно формирует отдельный тип, который содержит только значение null:

let age = null;



// Значение «undefined»
// Специальное значение undefined также стоит особняком. Оно формирует тип из самого себя так же, как и null.

// Оно означает, что «значение не было присвоено».



// Объекты и символы
// Тип object (объект) – особенный.
// Все остальные типы называются «примитивными», потому что их значениями могут быть только простые значения (будь то строка, или число, или что-то ещё). 
// В объектах же хранят коллекции данных или более сложные структуры.

// Тип symbol (символ) используется для создания уникальных идентификаторов в объектах. Мы упоминаем здесь о нём для полноты картины, изучим этот тип после объектов.


// Оператор typeof
// Оператор typeof возвращает тип аргумента. Это полезно, когда мы хотим обрабатывать значения различных типов по-разному или просто хотим сделать проверку.

typeof undefined // "undefined"

typeof 0 // "number"

typeof 10n // "bigint"

typeof true // "boolean"

typeof "foo" // "string"

typeof Symbol("id") // "symbol"

typeof Math // "object"  (1)

typeof null // "object"  (2)

typeof alert // "function"  (3)